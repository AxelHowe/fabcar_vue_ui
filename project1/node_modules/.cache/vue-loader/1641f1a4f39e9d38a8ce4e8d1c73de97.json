{"remainingRequest":"/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/src/views/Home.vue","mtime":1649001262088},{"path":"/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bernice1357689/Desktop/fabcar_vue_ui/project1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}